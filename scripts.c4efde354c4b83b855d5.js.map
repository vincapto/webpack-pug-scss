{"version":3,"file":"scripts.c4efde354c4b83b855d5.js","mappings":"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","sources":["webpack://simple-layout/./src/timer.js","webpack://simple-layout/./src/animation.js","webpack://simple-layout/./src/index.js"],"sourcesContent":["let seconds = document.querySelector('.seconds');\r\nlet minutes = document.querySelector('.minutes');\r\nlet hours = document.querySelector('.hours');\r\nlet total = 0;\r\n\r\nlet interval;\r\n\r\nexport function clearCount() {\r\n  clearInterval(interval);\r\n  interval = null;\r\n  seconds.innerHTML = '00';\r\n  minutes.innerHTML = '00';\r\n  hours.innerHTML = '00';\r\n  total = 0;\r\n}\r\n\r\nexport function startCount() {\r\n  if (!interval) {\r\n    interval = setInterval(count, 1000);\r\n    count();\r\n  } else {\r\n    clearCount();\r\n    interval = setInterval(count, 1000);\r\n    count();\r\n  }\r\n}\r\n\r\nexport function getTimerValue(params) {\r\n  return {\r\n    seconds: seconds.innerHTML,\r\n    minutes: minutes.innerHTML,\r\n    hours: hours.innerHTML,\r\n  };\r\n}\r\n\r\nfunction count() {\r\n  seconds.innerHTML = show(total % 60);\r\n  minutes.innerHTML = show(parseInt(total / 60));\r\n  hours.innerHTML = show(parseInt(total / 3600));\r\n  ++total;\r\n}\r\n\r\nfunction show(current) {\r\n  const str = current + '';\r\n  if (str.length < 2) {\r\n    return '0' + str;\r\n  } else {\r\n    return str;\r\n  }\r\n}\r\n","class AnimateDrag {\r\n  isDraggable = false;\r\n  puzzleRowLength = 4;\r\n  puzzleLength = 16;\r\n  movesCount = 0;\r\n  movesCountElement;\r\n  grabAnimationClass = [['move-grab'], ['move-transition']];\r\n  transitionListClass = 'move-list-item';\r\n  elementInitialState = { x: 0, y: 0 };\r\n  startPosition = { x: 0, y: 0, offsetTop: 0, initialId: 0 };\r\n  dragElement = null;\r\n  dragArea = null;\r\n  dragDropZone = [];\r\n  dragElementList = [];\r\n  startCell = {};\r\n  Axis = false;\r\n  startParent;\r\n  shiftMouseParent = 0;\r\n  cellFrame = {};\r\n  saveList = [];\r\n\r\n  getDivideRest(num) {\r\n    const div = this.puzzleRowLength;\r\n    switch ((num + 1) % div) {\r\n      case 0:\r\n        return [num - 1];\r\n      case 1:\r\n        return [num + 1];\r\n      default:\r\n        return [num - 1, num + 1];\r\n    }\r\n  }\r\n\r\n  getAvailableCells(key) {\r\n    const arr = [];\r\n    if (key + this.puzzleRowLength <= this.puzzleLength)\r\n      arr.push(key + this.puzzleRowLength);\r\n    if (key - this.puzzleRowLength >= 0) arr.push(key - this.puzzleRowLength);\r\n    arr.push(...this.getDivideRest(key));\r\n    return arr;\r\n  }\r\n\r\n  constructor(dragArea, dragDropZone, dragElementList) {\r\n    this.dragArea = dragArea;\r\n    this.dragDropZone = dragDropZone;\r\n    this.dragElementList = dragElementList;\r\n  }\r\n\r\n  setTransitionClass(listClass, grabClass) {\r\n    this.transitionListClass = listClass;\r\n    this.grabAnimationClass = grabClass;\r\n  }\r\n\r\n  checkSequence() {\r\n    const sortedList = this.dragElementList.sort((a, b) => {\r\n      return a.id - b.id;\r\n    });\r\n    console.table(sortedList);\r\n    this.saveList = sortedList;\r\n    sortedList.some((a, key) => {\r\n      return a.id === this.dragDropZone[key];\r\n    });\r\n  }\r\n\r\n  setInitInitialState() {\r\n    this.elementInitialState = {\r\n      x: this.dragElement.offsetLeft,\r\n      y: dragElement.offsetTop,\r\n    };\r\n  }\r\n\r\n  setStartPosition(mouseDown) {\r\n    const entry = this.getDifference(\r\n      { x: mouseDown.clientX, y: mouseDown.clientY },\r\n      this.dragArea\r\n    );\r\n    entry.y +=\r\n      this.dragElement.offsetTop - this.dragElement.style.top.replace('px', '');\r\n    this.startPosition = this.getDifference(entry, this.dragElement);\r\n    this.startPosition.offsetTop = this.dragElement.offsetTop;\r\n    this.Axis = this.getAxis(\r\n      mouseDown,\r\n      this.getDifference(\r\n        { x: mouseDown.clientX, y: mouseDown.clientY },\r\n        this.dragArea\r\n      )\r\n    );\r\n    this.startParent = this.findDragElement().parentId;\r\n    this.setDraggableBorders(mouseDown);\r\n    this.startCell = this.getDistanceRectCoord(\r\n      this.getParentCell().item,\r\n      this.dragElement\r\n    );\r\n    this.cellFrame = this.getAvailableCoord(this.getParentCell());\r\n    this.isDraggable = true;\r\n  }\r\n\r\n  getParentCell(index = this.startParent) {\r\n    return this.dragDropZone[index];\r\n  }\r\n\r\n  setElementPosition(element, { x, y }) {\r\n    element.style.left = x + 'px';\r\n    element.style.top = y + 'px';\r\n  }\r\n\r\n  toggleElementClass(\r\n    item,\r\n    reverse = false,\r\n    [add, remove] = this.grabAnimationClass\r\n  ) {\r\n    [add, remove] = !reverse ? [add, remove] : [remove, add];\r\n    item.classList.add(...add);\r\n    item.classList.remove(...remove);\r\n  }\r\n  getDifference(pos, item) {\r\n    return { x: pos.x - item.offsetLeft, y: pos.y - item.offsetTop };\r\n  }\r\n\r\n  checkElementCrossing(arr, element) {\r\n    const filtered = arr.filter(({ zone: drop }) => {\r\n      return this.checkIsCrossing(element, zone);\r\n    });\r\n    return filtered.length !== 0 ? filtered[0].id : null;\r\n  }\r\n\r\n  checkIsCrossing(element, drop) {\r\n    return (\r\n      element.top > drop.top - element.height / 2 &&\r\n      element.bottom - element.height / 2 < drop.bottom &&\r\n      element.left > drop.left - element.width / 2 &&\r\n      element.right - element.width / 2 < drop.right\r\n    );\r\n  }\r\n\r\n  setSingleTransition(element, className = this.transitionListClass) {\r\n    element.item.classList.add(className);\r\n    element.item.addEventListener('transitionend', () => {\r\n      element.item.classList.remove(className);\r\n    });\r\n  }\r\n\r\n  checkIsContainsTransition(element, className = this.transitionListClass) {\r\n    return element.item.classList.contains(className);\r\n  }\r\n\r\n  findDragElement(id = null) {\r\n    return id !== null\r\n      ? this.dragElementList.find((a) => a.id === id)\r\n      : this.dragElementList.find((a) => a.item === this.dragElement);\r\n  }\r\n\r\n  getDistanceRectCoord(...param) {\r\n    return {\r\n      x: this.getDistanceRect(...param, 'left'),\r\n      y: this.getDistanceRect(...param),\r\n    };\r\n  }\r\n\r\n  getDistanceRect(cell, element, prop = 'top') {\r\n    return (\r\n      cell.getBoundingClientRect()[prop] -\r\n      element.getBoundingClientRect()[prop] +\r\n      Number(element.style[prop].replace('px', ''))\r\n    );\r\n  }\r\n\r\n  setEmptyCell() {}\r\n\r\n  getAxis(e) {\r\n    return {\r\n      x:\r\n        e.clientY > this.emptyCell.item.getBoundingClientRect().top &&\r\n        e.clientY < this.emptyCell.item.getBoundingClientRect().bottom,\r\n      y:\r\n        e.clientX > this.emptyCell.item.getBoundingClientRect().left &&\r\n        e.clientX < this.emptyCell.item.getBoundingClientRect().right,\r\n    };\r\n  }\r\n\r\n  getAvailableCoord(currentCell) {\r\n    const cell = currentCell.item.getBoundingClientRect();\r\n    const emptyCell = this.emptyCell.item.getBoundingClientRect();\r\n    return {\r\n      left: cell.left <= emptyCell.left ? cell.left : emptyCell.left,\r\n      right: cell.right >= emptyCell.right ? cell.right : emptyCell.right,\r\n      top: cell.top <= emptyCell.top ? cell.top : emptyCell.top,\r\n      bottom: cell.bottom >= emptyCell.bottom ? cell.bottom : emptyCell.bottom,\r\n    };\r\n  }\r\n\r\n  checkAvailablePoints(coord, frame, axis) {\r\n    return axis\r\n      ? coord.top > frame.top && coord.bottom < frame.bottom\r\n      : coord.left > frame.left && coord.right < frame.right;\r\n  }\r\n\r\n  moveDragElement(mouseEvent, cell = {}) {\r\n    if (this.isDraggable) {\r\n      const currentPoint = this.getDifference(\r\n        { x: mouseEvent.clientX, y: mouseEvent.clientY },\r\n        this.dragArea\r\n      );\r\n      const position = this.Axis.x\r\n        ? { x: currentPoint.x - this.startPosition.x, y: this.startCell.y }\r\n        : this.Axis.y\r\n        ? { x: this.startCell.x, y: currentPoint.y - this.startPosition.y }\r\n        : null;\r\n      const positionSubShift = {\r\n        left: mouseEvent.clientX - this.shiftMouseParent.left,\r\n        right: mouseEvent.clientX + this.shiftMouseParent.right,\r\n        top: mouseEvent.y - this.shiftMouseParent.top,\r\n        bottom: mouseEvent.clientY + this.shiftMouseParent.bottom,\r\n      };\r\n\r\n      if (\r\n        position !== null &&\r\n        this.checkAvailablePoints(positionSubShift, this.cellFrame, this.Axis.y)\r\n      )\r\n        this.setElementPosition(this.dragElement, position);\r\n    }\r\n  }\r\n\r\n  watchCrossingList(mouseEvent) {\r\n    const drag = this.findDragElement();\r\n    this.moveDragElement(mouseEvent);\r\n    const collision = this.dragDropZone.filter(({ item }) => {\r\n      return (\r\n        this.checkIsCrossing(\r\n          this.dragElement.getBoundingClientRect(),\r\n          item.getBoundingClientRect()\r\n        ) && this.dragElement !== item\r\n      );\r\n    })[0];\r\n    if (collision && this.isDraggable) {\r\n      if (collision.nestedId !== null) return;\r\n      const parentId = drag.parentId;\r\n      collision.nestedId = drag.id;\r\n      drag.parentId = collision.id;\r\n      this.getParentCell(parentId).nestedId = null;\r\n    }\r\n  }\r\n\r\n  setDefaultPosition(loadList = []) {\r\n    const isLoaded = loadList.length !== 0;\r\n    this.dragElementList.forEach((item, key) => {\r\n      const parentId = isLoaded ? loadList[key] : key;\r\n      this.setElementPosition(\r\n        item.item,\r\n        this.getDistanceRectCoord(this.getParentCell(parentId).item, item.item)\r\n      );\r\n    });\r\n  }\r\n\r\n  setResizePosition() {\r\n    this.dragElementList.forEach((item, key) => {\r\n      this.setElementPosition(\r\n        item.item,\r\n        this.getDistanceRectCoord(\r\n          this.getParentCell(item.parentId).item,\r\n          item.item\r\n        )\r\n      );\r\n    });\r\n  }\r\n\r\n  setDraggableBorders(mouseDown) {\r\n    const boundaries = this.getParentCell().item.getBoundingClientRect();\r\n    this.shiftMouseParent = {\r\n      left: mouseDown.clientX - boundaries.left - 10,\r\n      right: boundaries.right - mouseDown.clientX - 10,\r\n      bottom: boundaries.bottom - mouseDown.clientY - 10,\r\n      top: mouseDown.clientY - boundaries.top - 10,\r\n    };\r\n  }\r\n\r\n  dropListener = (e) => {\r\n    e.preventDefault();\r\n    if (this.isDraggable) {\r\n      this.dropDragElement();\r\n    }\r\n  };\r\n\r\n  removeMouseUpListener = (e) => {\r\n    e.preventDefault();\r\n    this.triggerMouseEvent(this.dragElement, 'mouseup');\r\n    this.dragElement.removeEventListener('mouseup', this.dropListener);\r\n  };\r\n\r\n  startDragElementList(mouseDown, target) {\r\n    this.dragElement = target;\r\n    mouseDown.preventDefault();\r\n    this.setStartPosition(mouseDown);\r\n    this.dragArea.addEventListener('mousemove', (mouseMove) => {\r\n      if (\r\n        !this.getAvailableCells(this.emptyCell.id).includes(this.startParent)\r\n      ) {\r\n        // console.log('_____-------NOU');\r\n        return;\r\n      }\r\n      // console.log('AVALIBALE');\r\n      this.watchCrossingList(mouseMove);\r\n    });\r\n    this.dragElement.addEventListener('mouseleave', this.dropListener, {\r\n      once: true,\r\n    });\r\n    this.dragElement.addEventListener('mouseup', this.dropListener, {\r\n      once: true,\r\n    });\r\n  }\r\n\r\n  triggerMouseEvent(node, eventType) {\r\n    console.log('MOVING');\r\n    let clickEvent = document.createEvent('MouseEvents');\r\n    clickEvent.initEvent(eventType, true, true);\r\n    node.dispatchEvent(clickEvent);\r\n    // this.dragElement.removeEventListener('mouseup', this.mouseUpListener, true);\r\n  }\r\n\r\n  moveSolution() {\r\n    this.isDraggable = false;\r\n    const { parentId, id, moveTo } = this.movesPathList.pop();\r\n    const element = this.findDragElement(id);\r\n    const parent = this.getParentCell(moveTo).item;\r\n    console.log(parentId, id, moveTo);\r\n    console.log(element, parent);\r\n\r\n    const topShift = this.getDistanceRectCoord(parent, element.item);\r\n    this.setElementPosition(element.item, topShift);\r\n    this.setSingleTransition(element);\r\n    // console.log(this.emptyCell.id);\r\n    // console.table(this.dragElementList);\r\n    // this.checkSequence();\r\n    this.emptyCell = this.dragDropZone[parentId];\r\n    this.dragDropZone[parentId].nestedId = null;\r\n    element.item.classList.add(this.transitionListClass);\r\n    element.item.addEventListener('transitionend', () => {\r\n      this.movesPathList.length !== 0 ? this.moveSolution() : 0;\r\n      element.item.classList.remove(this.transitionListClass);\r\n    });\r\n  }\r\n\r\n  movesPathList = [];\r\n\r\n  addMovesPathList = ({ parentId, item, id }) => {\r\n    this.movesPathList.push({\r\n      parentId,\r\n      id,\r\n      moveTo: this.startParent,\r\n    });\r\n  };\r\n\r\n  dropDragElement() {\r\n    this.isDraggable = false;\r\n    const element = this.findDragElement();\r\n    const topShift = this.getDistanceRectCoord(\r\n      this.getParentCell(element.parentId).item,\r\n      this.dragElement\r\n    );\r\n    this.setElementPosition(this.dragElement, topShift);\r\n    this.setSingleTransition(this.findDragElement());\r\n    // console.log(this.emptyCell.id);\r\n    // console.table(this.dragElementList);\r\n    this.checkSequence();\r\n    if (element.parentId !== this.startParent) {\r\n      console.log(element);\r\n      this.addMovesPathList(element);\r\n      console.log(this.movesPathList);\r\n      this.emptyCell = this.getParentCell();\r\n      this.getParentCell().nestedId = null;\r\n      this.movesCount++;\r\n      this.movesCountElement(this.movesCount);\r\n    }\r\n  }\r\n}\r\n\r\nexport { AnimateDrag };\r\n","import './styles/index.scss';\r\nimport { startCount, clearCount } from './timer';\r\nimport { AnimateDrag } from './animation.js';\r\n\r\nconst createPuzzleItem = (className = '', order = 0) => {\r\n  return `\r\n    <div class='puzzle__item${className}' data-order=${order}>\r\n    <p>${order + 1}</p>\r\n    </div>\r\n  `;\r\n};\r\n\r\nconst createPuzzleCell = (element = '', order = '') => {\r\n  return `\r\n    <div class='puzzle__cell data-order=${order}'>\r\n    ${element}\r\n    </div>\r\n  `;\r\n};\r\n\r\nconst createPuzzleItemCell = (length = 16) => {\r\n  return Array(length)\r\n    .fill(0)\r\n    .map((a, index) => {\r\n      return createPuzzleCell('', index);\r\n    });\r\n};\r\n\r\nconst createPuzzleItemList = (array) => {\r\n  return array.map((a) => {\r\n    return createPuzzleItem('', a);\r\n  });\r\n};\r\n\r\nconst selectSize = document.querySelector('.controlSelect');\r\nconst resetButton = document.querySelector('.controlReset');\r\nconst saveButton = document.querySelector('.controlSave');\r\nconst loadButton = document.querySelector('.controlLoad');\r\n// const infoButton = document.querySelector('.controlInfo');\r\nconst movesCountElement = document.querySelector('.movesCount');\r\nconst soundCheck = document.querySelector('#soundCheck');\r\nconst moveSound = document.getElementById('myAudio');\r\n\r\nlet animateDrag = null;\r\n\r\nlet saveListItems = [];\r\nmoveSound.playbackRate = 1.4;\r\n\r\nsaveButton.addEventListener('click', () => {\r\n  saveGame('');\r\n});\r\n\r\nloadButton.addEventListener('click', () => {\r\n  loadGame('');\r\n});\r\n\r\nfunction playAudio() {\r\n  soundCheck.checked ? moveSound.play() : 0;\r\n}\r\n\r\nlet arrayLength = 16;\r\n\r\nselectSize.addEventListener('change', (event) => {\r\n  arrayLength = event.target.value ** 2;\r\n  setGame();\r\n  console.log(arrayLength);\r\n});\r\n\r\nresetButton.addEventListener('click', (event) => {\r\n  console.log('RESET');\r\n  setGame();\r\n  startCount();\r\n});\r\n\r\nfunction fisherShuffle(arr) {\r\n  let i = arr.length;\r\n  while (--i > 0) {\r\n    let randIndex = Math.floor(Math.random() * (i + 1));\r\n    [arr[randIndex], arr[i]] = [arr[i], arr[randIndex]];\r\n    console.log(i + 1, randIndex + 1);\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction shuffleArray(arrayLength) {\r\n  const array = Array(arrayLength)\r\n    .fill(0)\r\n    .map((_, key) => key);\r\n  const flag = false;\r\n  let shuffled = [];\r\n  while (true) {\r\n    shuffled = fisherShuffle(array);\r\n    if (isSolvable(shuffled)) return shuffled;\r\n  }\r\n}\r\n\r\nconst checkVictory = (list) => {\r\n  console.log(Array.isArray(list));\r\n  const isVictory = list.every((a) => {\r\n    console.log('ON PLACE', a.id === a.parentId);\r\n    if (a.id === arrayLength.length - 1) return true;\r\n    return a.id === a.parentId;\r\n  });\r\n  return isVictory;\r\n};\r\n\r\nconst isSolvable = (arr) => {\r\n  //для каждого элемента массива\r\n  for (var kDisorder = 0, i = 1, len = arr.length - 1; i < len; i++) {\r\n    //узнаём сколько предшествующих элементов больше текущего\r\n    for (var j = i - 1; j >= 0; j--) {\r\n      //если один из предыдущих элементов больше - накручиваем счетчик\r\n      if (arr[j] > arr[i]) {\r\n        kDisorder++;\r\n      }\r\n    }\r\n  }\r\n\r\n  //если сумма вышла четной - комбинация имеет решение\r\n  return !(kDisorder % 2);\r\n};\r\n\r\nconst puzzleListElement = document.querySelector('.puzzle__list');\r\n\r\nconst setGridStyle = (count = 3) => {\r\n  return `grid-template-columns: repeat(${count}, 1fr);\r\n    grid-template-rows: repeat(${count}, 1fr);font-size:${90 / count}px;`;\r\n};\r\n\r\nconst saveGame = (itemList) => {\r\n  if (animateDrag.saveList.length !== null) {\r\n    const sort = animateDrag.saveList.map((a) => {\r\n      return a.parentId;\r\n    });\r\n    console.log('EMPTY', animateDrag.emptyCell);\r\n    localStorage.setItem('itemList', JSON.stringify(sort));\r\n    localStorage.setItem('timer', JSON.stringify(getTimerValue));\r\n    localStorage.setItem('moves', JSON.stringify(animateDrag.movesCount));\r\n    localStorage.setItem('emptyCell', JSON.stringify(animateDrag.emptyCell.id));\r\n  }\r\n};\r\n\r\nconst loadGame = () => {\r\n  const loaded = JSON.parse(localStorage.getItem('itemList'));\r\n  const emptyCell = JSON.parse(localStorage.getItem('emptyCell'));\r\n  console.log(emptyCell);\r\n  setGame(loaded, emptyCell);\r\n};\r\n\r\nconst changeMoveElement = (count) => {\r\n  movesCountElement.innerHTML = `Moves ${count}`;\r\n};\r\n\r\nconst setGame = (loadedGame = [], empty = null) => {\r\n  const shuffledArray =\r\n    loadedGame.length !== 0\r\n      ? Array(arrayLength)\r\n          .fill(0)\r\n          .map((_, key) => key)\r\n      : shuffleArray(arrayLength);\r\n  console.table(shuffledArray);\r\n  puzzleListElement.setAttribute('style', setGridStyle(Math.sqrt(arrayLength)));\r\n  const puzzleListArr = createPuzzleItemCell(arrayLength);\r\n\r\n  puzzleListArr[0] = createPuzzleCell(\r\n    [...createPuzzleItemList(shuffledArray)],\r\n    0\r\n  );\r\n\r\n  puzzleListElement.innerHTML = [...puzzleListArr]\r\n    .toString()\r\n    .replaceAll(',', '');\r\n\r\n  const puzzleListItem = document.querySelectorAll('.puzzle__item');\r\n  const puzzleListCell = document.querySelectorAll('.puzzle__cell');\r\n\r\n  const findLast = (list) => {\r\n    const element = list.find((a) => a.id === arrayLength - 1);\r\n    return list.indexOf(element);\r\n  };\r\n\r\n  console.log('GAME SET');\r\n  const puzzleItemObjArr = [...puzzleListItem].map((item, key) => {\r\n    const isLoaded = loadedGame.length !== 0;\r\n    const parentId = isLoaded ? loadedGame[key] : key;\r\n    return { item, parentId: parentId, id: Number(item.dataset.order) };\r\n  });\r\n\r\n  const puzzleCellObjArr = [...puzzleListCell].map((item, key) => {\r\n    const nested = puzzleItemObjArr[key] ? puzzleItemObjArr[key].id : null;\r\n    return { item, nestedId: puzzleItemObjArr[key].id, id: key };\r\n  });\r\n\r\n  const lastElementIndex =\r\n    loadedGame.length !== 0 ? empty : findLast(puzzleItemObjArr);\r\n\r\n  animateDrag = new AnimateDrag(\r\n    puzzleListElement,\r\n    [...puzzleCellObjArr],\r\n    puzzleItemObjArr\r\n  );\r\n\r\n  animateDrag.movesCountElement = changeMoveElement;\r\n\r\n  puzzleCellObjArr.at(lastElementIndex).nestedId = null;\r\n  puzzleItemObjArr[findLast(puzzleItemObjArr)].item.classList.add('hide');\r\n\r\n  animateDrag.emptyCell = empty\r\n    ? puzzleCellObjArr.at(empty)\r\n    : puzzleCellObjArr.at(lastElementIndex);\r\n\r\n  console.log('SET EMPTY', animateDrag.emptyCell);\r\n  animateDrag.setDefaultPosition(loadedGame);\r\n  animateDrag.puzzleRowLength = Math.sqrt(arrayLength);\r\n  animateDrag.puzzleLength = arrayLength;\r\n  puzzleListItem.forEach((item, key) => {\r\n    item.addEventListener('mousedown', (e) => {\r\n      playAudio();\r\n      animateDrag.startDragElementList(e, item);\r\n      // movesCountElement.innerHTML = animateDrag.movesCount;\r\n      if (checkVictory(puzzleItemObjArr)) {\r\n        alert('VICTORY');\r\n      }\r\n    });\r\n  });\r\n\r\n  // infoButton.addEventListener('click', () => {\r\n  //   console.log('BACK');\r\n  //   animateDrag.moveSolution();\r\n  // });\r\n\r\n  window.addEventListener('resize', function (event) {\r\n    if (puzzleListElement.clientWidth < 1100) {\r\n      console.log('LESS');\r\n      animateDrag.setResizePosition();\r\n    } else console.log('more');\r\n  });\r\n};\r\n\r\nsetGame();\r\n"],"names":["interval","seconds","document","querySelector","minutes","hours","total","count","innerHTML","show","parseInt","current","str","length","AnimateDrag","isDraggable","puzzleRowLength","puzzleLength","movesCount","movesCountElement","grabAnimationClass","transitionListClass","elementInitialState","x","y","startPosition","offsetTop","initialId","dragElement","dragArea","dragDropZone","dragElementList","startCell","Axis","startParent","shiftMouseParent","cellFrame","saveList","getDivideRest","num","this","getAvailableCells","key","arr","push","constructor","setTransitionClass","listClass","grabClass","checkSequence","sortedList","sort","a","b","id","console","table","some","setInitInitialState","offsetLeft","setStartPosition","mouseDown","entry","getDifference","clientX","clientY","style","top","replace","getAxis","findDragElement","parentId","setDraggableBorders","getDistanceRectCoord","getParentCell","item","getAvailableCoord","index","setElementPosition","element","left","toggleElementClass","reverse","add","remove","classList","pos","checkElementCrossing","filtered","filter","zone","drop","checkIsCrossing","height","bottom","width","right","setSingleTransition","className","addEventListener","checkIsContainsTransition","contains","find","param","getDistanceRect","cell","prop","getBoundingClientRect","Number","setEmptyCell","e","emptyCell","currentCell","checkAvailablePoints","coord","frame","axis","moveDragElement","mouseEvent","currentPoint","position","positionSubShift","watchCrossingList","drag","collision","nestedId","setDefaultPosition","loadList","isLoaded","forEach","setResizePosition","boundaries","dropListener","preventDefault","dropDragElement","removeMouseUpListener","triggerMouseEvent","removeEventListener","startDragElementList","target","mouseMove","includes","once","node","eventType","log","clickEvent","createEvent","initEvent","dispatchEvent","moveSolution","moveTo","movesPathList","pop","parent","topShift","addMovesPathList","createPuzzleCell","order","selectSize","resetButton","saveButton","loadButton","soundCheck","moveSound","getElementById","animateDrag","playbackRate","saveGame","loadGame","arrayLength","fisherShuffle","i","randIndex","Math","floor","random","event","value","setGame","clearInterval","setInterval","isSolvable","kDisorder","len","j","puzzleListElement","itemList","map","localStorage","setItem","JSON","stringify","getTimerValue","loaded","parse","getItem","changeMoveElement","loadedGame","empty","shuffledArray","Array","fill","_","array","shuffled","shuffleArray","setAttribute","setGridStyle","sqrt","puzzleListArr","createPuzzleItemCell","createPuzzleItem","toString","replaceAll","puzzleListItem","querySelectorAll","puzzleListCell","findLast","list","indexOf","puzzleItemObjArr","dataset","puzzleCellObjArr","lastElementIndex","at","checked","play","isArray","every","alert","window","clientWidth"],"sourceRoot":""}