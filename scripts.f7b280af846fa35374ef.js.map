{"version":3,"file":"scripts.f7b280af846fa35374ef.js","mappings":"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","sources":["webpack://simple-layout/./src/timer.js","webpack://simple-layout/./src/animation.js","webpack://simple-layout/./src/index.js","webpack://simple-layout/./src/body.js"],"sourcesContent":["export class Timer {\r\n  interval = null;\r\n  constructor(callback) {\r\n    this.total = 0;\r\n    this.interval = null;\r\n    this.callback = callback;\r\n  }\r\n\r\n  getIntervalState() {\r\n    // console.log('_________interval', this.interval);\r\n    return this.interval !== null;\r\n  }\r\n\r\n  clearCount() {\r\n    clearInterval(this.interval);\r\n    this.interval = null;\r\n    this.total = 0;\r\n    const time = this.getEndTime();\r\n    // console.log('call', this.total);\r\n    this.callback(time);\r\n  }\r\n\r\n  newTimer = () => {\r\n    this.total = 0;\r\n    this.interval = setInterval(this.count.bind(this), 1000);\r\n    this.count();\r\n  };\r\n\r\n  fireCount = () => {\r\n    this.count();\r\n    this.interval = setInterval(this.count.bind(this), 1000);\r\n    console.log('START');\r\n  };\r\n\r\n  startCount = () => {\r\n    if (!this.interval) {\r\n      this.fireCount();\r\n    } else {\r\n      console.log('STOP');\r\n      this.stopCount();\r\n    }\r\n  };\r\n\r\n  stopCount() {\r\n    this.total !== 0 ? this.total : 0;\r\n    clearInterval(this.interval);\r\n    this.interval = null;\r\n  }\r\n\r\n  getTimerValue() {\r\n    return {\r\n      minutes: this.show(parseInt(this.total / 60)),\r\n      seconds: this.show(this.total % 60),\r\n    };\r\n  }\r\n\r\n  count() {\r\n    const time = this.getEndTime();\r\n    // console.log('call', this.total);\r\n    this.callback(time);\r\n    ++this.total;\r\n  }\r\n\r\n  getEndTime() {\r\n    return `${this.show(parseInt(this.total / 60))}:${this.show(\r\n      this.total % 60\r\n    )} `;\r\n  }\r\n\r\n  getTotal() {\r\n    return this.total;\r\n  }\r\n  setTotal(count) {\r\n    console.log('COUNT TIME ', count);\r\n    this.total = count;\r\n  }\r\n\r\n  show(current) {\r\n    const str = current + '';\r\n    if (str.length < 2) {\r\n      return '0' + str;\r\n    } else {\r\n      return str;\r\n    }\r\n  }\r\n}\r\n\r\nlet seconds = document.querySelector('.seconds');\r\nlet minutes = document.querySelector('.minutes');\r\nlet hours = document.querySelector('.hours');\r\nlet total = 0;\r\n\r\nlet interval = null;\r\n\r\nexport function getIntervalState() {\r\n  return interval;\r\n}\r\n\r\nexport function clearCount() {\r\n  clearInterval(interval);\r\n  interval = null;\r\n  seconds.innerHTML = '00';\r\n  minutes.innerHTML = '00';\r\n  hours.innerHTML = '00';\r\n  total = 0;\r\n}\r\n\r\nexport function newTimer() {\r\n  total = 0;\r\n  interval = setInterval(count, 1000);\r\n  count();\r\n}\r\n\r\nexport function startCount() {\r\n  if (!interval) {\r\n    interval = setInterval(count, 1000);\r\n    count();\r\n    console.log('START');\r\n  } else {\r\n    console.log('STOP');\r\n    stopCount();\r\n  }\r\n}\r\n\r\nexport function stopCount() {\r\n  total !== 0 ? total-- : 0;\r\n  clearInterval(interval);\r\n  interval = null;\r\n}\r\n\r\nexport function getTimerValue() {\r\n  return {\r\n    seconds: seconds.innerHTML,\r\n    minutes: minutes.innerHTML,\r\n    hours: hours.innerHTML,\r\n  };\r\n}\r\n\r\nfunction count() {\r\n  seconds.innerHTML = show(total % 60);\r\n  minutes.innerHTML = show(parseInt(total / 60));\r\n  hours.innerHTML = show(parseInt(total / 3600));\r\n  total++;\r\n}\r\n\r\nexport function getEndTime() {\r\n  return `${show(parseInt(total / 3600))}:${show(parseInt(total / 60))}:${show(\r\n    total % 60\r\n  )} `;\r\n}\r\nexport function getTotal() {\r\n  return total;\r\n}\r\n\r\nfunction show(current) {\r\n  const str = current + '';\r\n  if (str.length < 2) {\r\n    return '0' + str;\r\n  } else {\r\n    return str;\r\n  }\r\n}\r\n","class AnimateDrag {\r\n  isDraggable = false;\r\n  puzzleRowLength = 4;\r\n  puzzleLength = 16;\r\n  movesCount = 0;\r\n  movesCountElement;\r\n  grabAnimationClass = [['move-grab'], ['move-transition']];\r\n  transitionListClass = 'move-list-item';\r\n  elementInitialState = { x: 0, y: 0 };\r\n  startPosition = { x: 0, y: 0, offsetTop: 0, initialId: 0 };\r\n  dragElement = null;\r\n  dragArea = null;\r\n  dragDropZone = [];\r\n  dragElementList = [];\r\n  startCell = {};\r\n  Axis = false;\r\n  startParent;\r\n  shiftMouseParent = 0;\r\n  cellFrame = {};\r\n  saveList = [];\r\n\r\n  resetCount(init = 0) {\r\n    this.movesCountElement(init);\r\n    this.movesCount = init;\r\n    console.log('CALL RESET', this.movesCount);\r\n  }\r\n\r\n  getDivideRest(num) {\r\n    const div = this.puzzleRowLength;\r\n    switch ((num + 1) % div) {\r\n      case 0:\r\n        return [num - 1];\r\n      case 1:\r\n        return [num + 1];\r\n      default:\r\n        return [num - 1, num + 1];\r\n    }\r\n  }\r\n\r\n  getAvailableCells(key) {\r\n    const arr = [];\r\n    if (key + this.puzzleRowLength <= this.puzzleLength)\r\n      arr.push(key + this.puzzleRowLength);\r\n    if (key - this.puzzleRowLength >= 0) arr.push(key - this.puzzleRowLength);\r\n    arr.push(...this.getDivideRest(key));\r\n    return arr;\r\n  }\r\n\r\n  constructor(dragArea, dragDropZone, dragElementList) {\r\n    this.dragArea = dragArea;\r\n    this.dragDropZone = dragDropZone;\r\n    this.dragElementList = dragElementList;\r\n  }\r\n\r\n  setTransitionClass(listClass, grabClass) {\r\n    this.transitionListClass = listClass;\r\n    this.grabAnimationClass = grabClass;\r\n  }\r\n\r\n  saveGameList() {\r\n    const sortedList = this.dragElementList.sort((a, b) => {\r\n      return a.id - b.id;\r\n    });\r\n    this.saveList = sortedList;\r\n  }\r\n\r\n  checkSequence() {\r\n    const sortedList = this.dragElementList.sort((a, b) => {\r\n      return a.id - b.id;\r\n    });\r\n    console.table(sortedList);\r\n    this.saveList = sortedList;\r\n    sortedList.some((a, key) => {\r\n      return a.id === this.dragDropZone[key];\r\n    });\r\n  }\r\n\r\n  isSolved() {\r\n    const order = this.dragElementList.filter((a) => {\r\n      if (a.id !== this.dragElementList.length - 1) {\r\n        return a.parentId === a.id;\r\n      } else return false;\r\n    });\r\n    // console.log(order, this.dragElementList.length);\r\n    // return Array(this.dragElementList)\r\n    //   .fill(0)\r\n    //   .map((a, key) => key)\r\n    //   .reduce((acc, next, ind) => {\r\n    //     return next !== order[ind] ? acc + 1 : acc;\r\n    //   }, 0);\r\n    return order.length === this.dragElementList.length - 1;\r\n  }\r\n\r\n  setInitInitialState() {\r\n    this.elementInitialState = {\r\n      x: this.dragElement.offsetLeft,\r\n      y: dragElement.offsetTop,\r\n    };\r\n  }\r\n\r\n  setStartPosition(mouseDown) {\r\n    const entry = this.getDifference(\r\n      { x: mouseDown.clientX, y: mouseDown.clientY },\r\n      this.dragArea\r\n    );\r\n    entry.y +=\r\n      this.dragElement.offsetTop - this.dragElement.style.top.replace('px', '');\r\n    this.startPosition = this.getDifference(entry, this.dragElement);\r\n    this.startPosition.offsetTop = this.dragElement.offsetTop;\r\n    this.Axis = this.getAxis(\r\n      mouseDown,\r\n      this.getDifference(\r\n        { x: mouseDown.clientX, y: mouseDown.clientY },\r\n        this.dragArea\r\n      )\r\n    );\r\n    this.startParent = this.findDragElement().parentId;\r\n    this.setDraggableBorders(mouseDown);\r\n    this.startCell = this.getDistanceRectCoord(\r\n      this.getParentCell().item,\r\n      this.dragElement\r\n    );\r\n    this.cellFrame = this.getAvailableCoord(this.getParentCell());\r\n    this.isDraggable = true;\r\n  }\r\n\r\n  getParentCell(index = this.startParent) {\r\n    return this.dragDropZone[index];\r\n  }\r\n\r\n  setElementPosition(element, { x, y }) {\r\n    element.style.left = x + 'px';\r\n    element.style.top = y + 'px';\r\n  }\r\n\r\n  toggleElementClass(\r\n    item,\r\n    reverse = false,\r\n    [add, remove] = this.grabAnimationClass\r\n  ) {\r\n    [add, remove] = !reverse ? [add, remove] : [remove, add];\r\n    item.classList.add(...add);\r\n    item.classList.remove(...remove);\r\n  }\r\n  getDifference(pos, item) {\r\n    return { x: pos.x - item.offsetLeft, y: pos.y - item.offsetTop };\r\n  }\r\n\r\n  checkElementCrossing(arr, element) {\r\n    const filtered = arr.filter(({ zone: drop }) => {\r\n      return this.checkIsCrossing(element, zone);\r\n    });\r\n    return filtered.length !== 0 ? filtered[0].id : null;\r\n  }\r\n\r\n  checkIsCrossing(element, drop) {\r\n    return (\r\n      element.top > drop.top - element.height / 2 &&\r\n      element.bottom - element.height / 2 < drop.bottom &&\r\n      element.left > drop.left - element.width / 2 &&\r\n      element.right - element.width / 2 < drop.right\r\n    );\r\n  }\r\n\r\n  setSingleTransition(element, className = this.transitionListClass) {\r\n    element.item.classList.add(className);\r\n    element.item.addEventListener('transitionend', () => {\r\n      element.item.classList.remove(className);\r\n    });\r\n  }\r\n\r\n  checkIsContainsTransition(element, className = this.transitionListClass) {\r\n    return element.item.classList.contains(className);\r\n  }\r\n\r\n  findDragElement(id = null) {\r\n    return id !== null\r\n      ? this.dragElementList.find((a) => a.id === id)\r\n      : this.dragElementList.find((a) => a.item === this.dragElement);\r\n  }\r\n\r\n  getDistanceRectCoord(...param) {\r\n    return {\r\n      x: this.getDistanceRect(...param, 'left'),\r\n      y: this.getDistanceRect(...param),\r\n    };\r\n  }\r\n\r\n  getDistanceRect(cell, element, prop = 'top') {\r\n    return (\r\n      cell.getBoundingClientRect()[prop] -\r\n      element.getBoundingClientRect()[prop] +\r\n      Number(element.style[prop].replace('px', ''))\r\n    );\r\n  }\r\n\r\n  setEmptyCell() {}\r\n\r\n  getAxis(e) {\r\n    return {\r\n      x:\r\n        e.clientY > this.emptyCell.item.getBoundingClientRect().top &&\r\n        e.clientY < this.emptyCell.item.getBoundingClientRect().bottom,\r\n      y:\r\n        e.clientX > this.emptyCell.item.getBoundingClientRect().left &&\r\n        e.clientX < this.emptyCell.item.getBoundingClientRect().right,\r\n    };\r\n  }\r\n\r\n  getAvailableCoord(currentCell) {\r\n    const cell = currentCell.item.getBoundingClientRect();\r\n    const emptyCell = this.emptyCell.item.getBoundingClientRect();\r\n    return {\r\n      left: cell.left <= emptyCell.left ? cell.left : emptyCell.left,\r\n      right: cell.right >= emptyCell.right ? cell.right : emptyCell.right,\r\n      top: cell.top <= emptyCell.top ? cell.top : emptyCell.top,\r\n      bottom: cell.bottom >= emptyCell.bottom ? cell.bottom : emptyCell.bottom,\r\n    };\r\n  }\r\n\r\n  checkAvailablePoints(coord, frame, axis) {\r\n    return axis\r\n      ? coord.top > frame.top && coord.bottom < frame.bottom\r\n      : coord.left > frame.left && coord.right < frame.right;\r\n  }\r\n\r\n  moveDragElement(Event, cell = {}) {\r\n    const mouseEvent = Event?.touches ? Event?.touches[0] : Event;\r\n    if (this.isDraggable) {\r\n      const currentPoint = this.getDifference(\r\n        { x: mouseEvent.clientX, y: mouseEvent.clientY },\r\n        this.dragArea\r\n      );\r\n      const position = this.Axis.x\r\n        ? { x: currentPoint.x - this.startPosition.x, y: this.startCell.y }\r\n        : this.Axis.y\r\n        ? { x: this.startCell.x, y: currentPoint.y - this.startPosition.y }\r\n        : null;\r\n\r\n      const positionSubShift = {\r\n        left: mouseEvent.clientX - this.shiftMouseParent.left,\r\n        right: mouseEvent.clientX + this.shiftMouseParent.right,\r\n        top: mouseEvent.clientY - this.shiftMouseParent.top,\r\n        bottom: mouseEvent.clientY + this.shiftMouseParent.bottom,\r\n      };\r\n      if (\r\n        position !== null &&\r\n        this.checkAvailablePoints(positionSubShift, this.cellFrame, this.Axis.y)\r\n      )\r\n        this.setElementPosition(this.dragElement, position);\r\n    }\r\n  }\r\n\r\n  watchCrossingList(mouseEvent) {\r\n    const drag = this.findDragElement();\r\n    this.moveDragElement(mouseEvent);\r\n    const collision = this.dragDropZone.filter(({ item }) => {\r\n      return (\r\n        this.checkIsCrossing(\r\n          this.dragElement.getBoundingClientRect(),\r\n          item.getBoundingClientRect()\r\n        ) && this.dragElement !== item\r\n      );\r\n    })[0];\r\n    if (collision && this.isDraggable) {\r\n      if (collision.nestedId !== null) return;\r\n      const parentId = drag.parentId;\r\n      collision.nestedId = drag.id;\r\n      drag.parentId = collision.id;\r\n      this.getParentCell(parentId).nestedId = null;\r\n    }\r\n  }\r\n\r\n  setDefaultPosition(loadList = []) {\r\n    const isLoaded = loadList.length !== 0;\r\n    this.dragElementList.forEach((item, key) => {\r\n      const parentId = isLoaded ? loadList[key] : key;\r\n      this.setElementPosition(\r\n        item.item,\r\n        this.getDistanceRectCoord(this.getParentCell(parentId).item, item.item)\r\n      );\r\n    });\r\n  }\r\n\r\n  setResizePosition() {\r\n    this.dragElementList.forEach((item, key) => {\r\n      this.setElementPosition(\r\n        item.item,\r\n        this.getDistanceRectCoord(\r\n          this.getParentCell(item.parentId).item,\r\n          item.item\r\n        )\r\n      );\r\n    });\r\n  }\r\n\r\n  setDraggableBorders(mouseDown) {\r\n    const boundaries = this.getParentCell().item.getBoundingClientRect();\r\n    console.log('AAAAAAAAAAAAAA', boundaries);\r\n    this.shiftMouseParent = {\r\n      left: mouseDown.clientX - boundaries.left - 10,\r\n      right: boundaries.right - mouseDown.clientX - 10,\r\n      bottom: boundaries.bottom - mouseDown.clientY - 10,\r\n      top: mouseDown.clientY - boundaries.top - 10,\r\n    };\r\n  }\r\n\r\n  dropListener = (e) => {\r\n    e.preventDefault();\r\n    console.log(`%c UP LISTENER`, 'font-size:25px; color:red;');\r\n    if (this.isDraggable) {\r\n      this.dropDragElement();\r\n    } else this.removeMouseUpListener();\r\n  };\r\n\r\n  removeMouseUpListener = () => {\r\n    // e.preventDefault();\r\n    // this.triggerMouseEvent(this.dragElement, 'mouseup');\r\n    this.dragElement.removeEventListener('mouseup', this.dropListener);\r\n    this.dragElement.removeEventListener('mouseleave', this.dropListener);\r\n    this.dragArea.removeEventListener('mousemove', this.moveHandler);\r\n    this.dragArea.removeEventListener('touchmove', this.moveHandler);\r\n    this.dragArea.removeEventListener('touchcancel', this.dropListener);\r\n    this.dragArea.removeEventListener('touchend', this.dropListener);\r\n  };\r\n\r\n  moveHandler = (mouseMove) => {\r\n    console.log(`%c MOVE LISTENER`, 'font-size:25px; color:red;');\r\n    if (!this.getAvailableCells(this.emptyCell.id).includes(this.startParent)) {\r\n      console.log('CANCEL-------------');\r\n      return;\r\n    }\r\n    this.watchCrossingList(mouseMove);\r\n  };\r\n\r\n  startDragElementList(Event, target) {\r\n    this.dragElement = target;\r\n\r\n    Event.preventDefault();\r\n    const mouseDown = Event?.touches ? Event?.touches[0] : Event;\r\n\r\n    if (!this.possibleMoves()) {\r\n      console.log('NOT POSSIBEL');\r\n      return;\r\n    }\r\n\r\n    this.setStartPosition(mouseDown);\r\n\r\n    this.dragArea.addEventListener('touchmove', this.moveHandler);\r\n    this.dragArea.addEventListener('mousemove', this.moveHandler);\r\n\r\n    this.dragElement.addEventListener('mouseleave', this.dropListener, {\r\n      once: true,\r\n    });\r\n\r\n    this.dragElement.addEventListener('touchcancel', this.dropListener, {\r\n      once: true,\r\n    });\r\n    this.dragElement.addEventListener('touchend', this.dropListener, {\r\n      once: true,\r\n    });\r\n    this.dragElement.addEventListener('mouseup', this.dropListener, {\r\n      once: true,\r\n    });\r\n  }\r\n  callVictory;\r\n\r\n  triggerMouseEvent(node, eventType) {\r\n    console.log('MOVING');\r\n    let clickEvent = document.createEvent('MouseEvents');\r\n    clickEvent.initEvent(eventType, true, true);\r\n    node.dispatchEvent(clickEvent);\r\n    // this.dragElement.removeEventListener('mouseup', this.mouseUpListener, true);\r\n  }\r\n\r\n  moveSolution() {\r\n    this.isDraggable = false;\r\n    const { parentId, id, moveTo } = this.movesPathList.pop();\r\n    const element = this.findDragElement(id);\r\n    const parent = this.getParentCell(moveTo).item;\r\n    console.log(parentId, id, moveTo);\r\n    console.log(element, parent);\r\n\r\n    const topShift = this.getDistanceRectCoord(parent, element.item);\r\n    this.setElementPosition(element.item, topShift);\r\n    this.setSingleTransition(element);\r\n    // console.log(this.emptyCell.id);\r\n    // console.table(this.dragElementList);\r\n    // this.checkSequence();\r\n    this.emptyCell = this.dragDropZone[parentId];\r\n    this.dragDropZone[parentId].nestedId = null;\r\n    element.item.classList.add(this.transitionListClass);\r\n    element.item.addEventListener('transitionend', () => {\r\n      this.movesPathList.length !== 0 ? this.moveSolution() : 0;\r\n      element.item.classList.remove(this.transitionListClass);\r\n    });\r\n  }\r\n\r\n  movesPathList = [];\r\n\r\n  addMovesPathList = ({ parentId, item, id }) => {\r\n    this.movesPathList.push({\r\n      parentId,\r\n      id,\r\n      moveTo: this.startParent,\r\n    });\r\n  };\r\n\r\n  getAvailableMoves = (position) => {\r\n    console.log('POSITION', position);\r\n    const length = this.dragElementList.length;\r\n    const row = Math.sqrt(length);\r\n    const direction = [row, -row];\r\n    (position + 1) % this.row !== 0 ? direction.push(1) : 0;\r\n    position % this.row !== 0 ? direction.push(-1) : 0;\r\n    return direction\r\n      .map((a) => {\r\n        console.log(a + position);\r\n        return a + position;\r\n      })\r\n      .filter((b) => b >= 0 && b < length);\r\n  };\r\n\r\n  possibleMoves() {\r\n    const element = this.findDragElement();\r\n    const moves = this.getAvailableMoves(this.emptyCell.id);\r\n    console.log('-------------', this.emptyCell.id);\r\n    const parent = this.getParentCell(element.parentId).id;\r\n    // this.dragDropZone[index];\r\n    return moves.includes(element.parentId);\r\n  }\r\n\r\n  dropDragElement() {\r\n    this.isDraggable = false;\r\n    const element = this.findDragElement();\r\n    const topShift = this.getDistanceRectCoord(\r\n      this.getParentCell(element.parentId).item,\r\n      this.dragElement\r\n    );\r\n    this.setElementPosition(this.dragElement, topShift);\r\n    this.setSingleTransition(this.findDragElement());\r\n    // console.log(this.emptyCell.id);\r\n    // console.table(this.dragElementList);\r\n    this.checkSequence();\r\n    if (element.parentId !== this.startParent) {\r\n      console.log(element);\r\n      // this.addMovesPathList(element);\r\n      // console.log(this.movesPathList);\r\n      this.emptyCell = this.getParentCell();\r\n      this.getParentCell().nestedId = null;\r\n      this.movesCount++;\r\n      this.movesCountElement(this.movesCount);\r\n      this.callVictory(this.isSolved());\r\n      this.removeMouseUpListener();\r\n      console.log(`%c${this.isSolved()}`, 'font-size:25px');\r\n    } else this.removeMouseUpListener();\r\n  }\r\n}\r\n\r\nexport { AnimateDrag };\r\n","import './styles/index.scss';\r\nimport { Solution } from './solve';\r\nimport { getBody } from './body';\r\nconst body = document.querySelector('body');\r\nbody.innerHTML = getBody();\r\n\r\nimport {\r\n  startCount,\r\n  getEndTime,\r\n  stopCount,\r\n  clearCount,\r\n  getIntervalState,\r\n  getTotal,\r\n  Timer,\r\n} from './timer';\r\nimport { AnimateDrag } from './animation.js';\r\n\r\nlet seconds = document.querySelector('.seconds');\r\n\r\nfunction showTimeCallback(str) {\r\n  // console.log('CALL STR', str);\r\n  seconds.innerHTML = str;\r\n}\r\n\r\nconst timer = new Timer(showTimeCallback);\r\n\r\nconst createPuzzleItem = (className = '', order = 0) => {\r\n  return `\r\n    <div class='puzzle__item${className}' data-order=${order}>\r\n    <p>${order + 1}</p>\r\n    </div>\r\n  `;\r\n};\r\n\r\nconst createPuzzleCell = (element = '', order = '') => {\r\n  return `\r\n    <div class='puzzle__cell data-order=${order}'>\r\n    ${element}\r\n    </div>\r\n  `;\r\n};\r\nconst createPopup = (time, moves) => {\r\n  return `\r\n    <div class='popup'>\r\n    <p>«Hooray! You solved the puzzle in <b>${time}</b> and <b>${moves}</b> moves!»</p>\r\n    <p>click anywhere to close</p>\r\n    </div>\r\n  `;\r\n};\r\n\r\nconst createLeaderBoard = (list) => {\r\n  const result =\r\n    list.length !== 0\r\n      ? list.map((a, key) => {\r\n          return `\r\n      <div class='leaderItem'>\r\n      <span>${key + 1}. ${a.time} moves - ${a.count}</span>      \r\n      </div>\r\n      `;\r\n        })\r\n      : ['Board is empty'];\r\n  return `\r\n    <div class='popup'>\r\n    <h3>Leader board</h3>\r\n    <ul class=\"scoreBoard\">\r\n      ${result.join('')}\r\n    </ul>\r\n      <p>click anywhere to close</p>\r\n      </div>\r\n    `;\r\n};\r\n\r\nconst createPuzzleItemCell = (length = 16) => {\r\n  return Array(length)\r\n    .fill(0)\r\n    .map((a, index) => {\r\n      return createPuzzleCell('', index);\r\n    });\r\n};\r\n\r\nconst createPuzzleItemList = (array) => {\r\n  return array.map((a) => {\r\n    return createPuzzleItem('', a);\r\n  });\r\n};\r\n\r\nconst selectSize = document.querySelector('.controlSelect');\r\nconst shuffleButton = document.querySelector('.controlShuffle');\r\nconst resetButton = document.querySelector('.controlReset');\r\nconst saveButton = document.querySelector('.controlSave');\r\nconst loadButton = document.querySelector('.controlLoad');\r\nconst infoButton = document.querySelector('.controlInfo');\r\nconst movesCountElement = document.querySelector('.movesCount');\r\nconst soundCheck = document.querySelector('#soundCheck');\r\nconst moveSound = document.getElementById('myAudio');\r\nconst modal = document.querySelector('.modal');\r\nconst puzzleListElement = document.querySelector('.puzzle__list');\r\nconst savedModal = document.querySelector('.savedModal');\r\n\r\nlet animateDrag = null;\r\nlet solutionShuffle = [];\r\n\r\nlet saveListItems = [];\r\nmoveSound.playbackRate = 1.4;\r\n\r\nsaveButton.addEventListener('click', () => {\r\n  saveGame('');\r\n});\r\n\r\nloadButton.addEventListener('click', () => {\r\n  loadGame('');\r\n});\r\n\r\nfunction playAudio() {\r\n  soundCheck.checked ? moveSound.play() : 0;\r\n}\r\n\r\nlet arrayLength = 9;\r\n\r\nselectSize.addEventListener('change', (event) => {\r\n  arrayLength = event.target.value ** 2;\r\n  setGame();\r\n  console.log(arrayLength);\r\n});\r\n\r\nshuffleButton.addEventListener('click', (event) => {\r\n  console.log('SHUFFLE');\r\n  setGame();\r\n  timer.clearCount();\r\n  // startCount();\r\n});\r\nresetButton.addEventListener('click', (event) => {\r\n  console.log('RESET');\r\n  // setGame();\r\n  // startCount();\r\n  timer.startCount();\r\n});\r\n\r\nmodal.addEventListener('click', () => {\r\n  modal.classList.remove('activeModal');\r\n  callVictory();\r\n});\r\n\r\ninfoButton.addEventListener('click', (event) => {\r\n  console.log('RUN SOLUTION');\r\n  // modal.classList.toggle('activeModal');\r\n  showModal(false);\r\n  // const solution = new Solution(\r\n  //   Array(arrayLength)\r\n  //     .fill(0)\r\n  //     .map((_, key) => key),\r\n  //   solutionShuffle,\r\n  //   Math.sqrt(arrayLength),\r\n  //   arrayLength\r\n  // );\r\n  // solution.startSearch();\r\n});\r\n\r\nfunction fisherShuffle(arr) {\r\n  let i = arr.length;\r\n  while (--i > 0) {\r\n    let randIndex = Math.floor(Math.random() * (i + 1));\r\n    [arr[randIndex], arr[i]] = [arr[i], arr[randIndex]];\r\n    // console.log(i + 1, randIndex + 1);\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction shuffleArray(arrayLength) {\r\n  const array = Array(arrayLength)\r\n    .fill(0)\r\n    .map((_, key) => key);\r\n  const flag = false;\r\n  let shuffled = [];\r\n  while (true) {\r\n    shuffled = fisherShuffle(array);\r\n    // console.log('SHUFFLED', shuffled);\r\n    // console.log('SOLVABLE', !isSolvableLess(shuffled));\r\n    // console.log(\r\n    //   'SOLVABLE INITIAL',\r\n    //   !isSolvableLess([0, 1, 2, 3, 4, 5, 6, 7, 8])\r\n    // );\r\n    console.log('SOLVABLE WRONG', !isSolvableLess([0, 8, 1, 2, 3, 4, 5, 7, 6]));\r\n    if (!isSolvableLess(shuffled)) {\r\n      solutionShuffle = shuffled;\r\n      // const solve = new Solution([0, 1, 2, 3, 4, 5, 6, 7, 8], shuffled, 3, 9);\r\n      // console.log(solve.startSearch());\r\n      return shuffled;\r\n    }\r\n  }\r\n}\r\n\r\nconst checkVictory = (list) => {\r\n  console.log(Array.isArray(list));\r\n  const isVictory = list.every((a) => {\r\n    console.log('ON PLACE', a.id === a.parentId);\r\n    if (a.id === arrayLength.length - 1) return true;\r\n    return a.id === a.parentId;\r\n  });\r\n  return isVictory;\r\n};\r\n\r\nvar tileCount = arrayLength;\r\n\r\nfunction countInversions(i, j) {\r\n  var inversions = 0;\r\n  var tileNum = j * tileCount + i;\r\n  var lastTile = tileCount * tileCount;\r\n  var tileValue = boardParts[i][j].y * tileCount + boardParts[i][j].x;\r\n  for (var q = tileNum + 1; q < lastTile; ++q) {\r\n    var k = q % tileCount;\r\n    var l = Math.floor(q / tileCount);\r\n\r\n    var compValue = boardParts[k][l].y * tileCount + boardParts[k][l].x;\r\n    if (tileValue > compValue && tileValue != lastTile - 1) {\r\n      ++inversions;\r\n    }\r\n  }\r\n  return inversions;\r\n}\r\n\r\nfunction sumInversions() {\r\n  var inversions = 0;\r\n  for (var j = 0; j < tileCount; ++j) {\r\n    for (var i = 0; i < tileCount; ++i) {\r\n      inversions += countInversions(i, j);\r\n    }\r\n  }\r\n  return inversions;\r\n}\r\n\r\nfunction isSolvableExample(width, height, emptyRow) {\r\n  if (width % 2 == 1) {\r\n    return sumInversions() % 2 == 0;\r\n  } else {\r\n    return (sumInversions() + height - emptyRow) % 2 == 0;\r\n  }\r\n}\r\n\r\nconst isSolvableLess = (arr) => {\r\n  //для каждого элемента массива\r\n  let kDisorder = 0;\r\n  let len = arr.length - 1;\r\n  // console.log('COUNTRING', arr);\r\n  for (let i = 0; i <= len; i++) {\r\n    //узнаём сколько предшествующих элементов больше текущего\r\n    for (let j = i + 1; j <= len; j++) {\r\n      //если один из предыдущих элементов больше - накручиваем счетчик\r\n      if (arr[j] == len || arr[i] == len) continue;\r\n      // console.log(j, i, arr[j], arr[i]);\r\n      // console.log(`i=${i} el=${arr[i]} | j=${j} el=${arr[j]}`);\r\n      if (arr[j] < arr[i]) {\r\n        // console.log('PASS', arr[i], arr[j]);\r\n        kDisorder++;\r\n      }\r\n    }\r\n  }\r\n\r\n  const blank = Math.floor(arr.indexOf(len) / Math.sqrt(arrayLength));\r\n  // console.log(`%cCOUNT ${arr} ${kDisorder}`, 'font-size:30px');\r\n  // console.log('BLANK --------', blank);\r\n  //если сумма вышла четной - комбинация имеет решение\r\n  return arr.length % 2 !== 0\r\n    ? kDisorder % 2 !== 0\r\n    : (kDisorder + blank) % 2 === 0;\r\n};\r\n\r\nconst isSolvable = (arr) => {\r\n  //для каждого элемента массива\r\n  let kDisorder = 0;\r\n  let len = arr.length - 1;\r\n  for (let i = 0; i < len; i++) {\r\n    //узнаём сколько предшествующих элементов больше текущего\r\n    for (let j = i + 1; j >= 0; j--) {\r\n      //если один из предыдущих элементов больше - накручиваем счетчик\r\n      if (arr[j] > arr[i]) {\r\n        if (arr[j] !== len && arr[i] !== len) {\r\n          console.log(arr[i], arr[j]);\r\n          kDisorder++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  //если сумма вышла четной - комбинация имеет решение\r\n  return kDisorder % 2 === 0;\r\n};\r\n\r\nconst setGridStyle = (count = 3) => {\r\n  return `grid-template-columns: repeat(${count}, 1fr);\r\n    grid-template-rows: repeat(${count}, 1fr);font-size:${90 / count}px;`;\r\n};\r\n\r\nconst saveLeaderBoard = (score) => {\r\n  const loaded = JSON.parse(localStorage.getItem('board'));\r\n  console.log(loaded);\r\n  if (loaded) {\r\n    const list = [...loaded, score].sort((a, b) => {\r\n      return a.total - b.total;\r\n    });\r\n    console.log(list);\r\n    localStorage.setItem('board', JSON.stringify(list.slice(0, 10)));\r\n  } else localStorage.setItem('board', JSON.stringify([score]));\r\n};\r\n\r\nconst loadLeaderBoard = () => {\r\n  const loaded = JSON.parse(localStorage.getItem('board'));\r\n  const list = loaded\r\n    ? loaded.sort((a, b) => {\r\n        return a.total - b.total;\r\n      })\r\n    : [];\r\n  return list.length !== 0 ? list : [];\r\n};\r\n\r\nconst saveGame = (itemList) => {\r\n  if (animateDrag.saveList.length !== null) {\r\n    const sort = animateDrag.saveList.map((a) => {\r\n      return a.parentId;\r\n    });\r\n    console.log('EMPTY', animateDrag.emptyCell, animateDrag.movesCount);\r\n    localStorage.setItem('itemList', JSON.stringify(sort));\r\n    localStorage.setItem('timer', JSON.stringify(timer.getTotal()));\r\n    localStorage.setItem('moves', JSON.stringify(animateDrag.movesCount));\r\n    localStorage.setItem('row', JSON.stringify(Math.sqrt(arrayLength)));\r\n    localStorage.setItem('emptyCell', JSON.stringify(animateDrag.emptyCell.id));\r\n    // savedModal.classList.remove('hide');\r\n    showSmallModal();\r\n  }\r\n};\r\n\r\nfunction showSmallModal(message = 'Game Saved!') {\r\n  savedModal.innerHTML = message;\r\n  savedModal.classList.add('active');\r\n  savedModal.addEventListener('transitionend', () => {\r\n    savedModal.classList.remove('active');\r\n  });\r\n}\r\n\r\nconst loadGame = () => {\r\n  const loaded = JSON.parse(localStorage.getItem('itemList'));\r\n  if (!loaded) {\r\n    showSmallModal('NO SAVED GAME');\r\n    return;\r\n  }\r\n  const emptyCell = JSON.parse(localStorage.getItem('emptyCell'));\r\n  const movesLoaded = JSON.parse(localStorage.getItem('moves'));\r\n  const total = JSON.parse(localStorage.getItem('timer'));\r\n  const row = JSON.parse(localStorage.getItem('row'));\r\n  selectSize.value = row;\r\n  arrayLength = row ** 2;\r\n  puzzleListElement.classList.add('blinkList');\r\n\r\n  puzzleListElement.addEventListener('transitionend', () => {\r\n    puzzleListElement.classList.remove('blinkList');\r\n  });\r\n  timer.setTotal(total);\r\n  showTimeCallback(timer.getEndTime());\r\n  timer.stopCount();\r\n  console.log(emptyCell);\r\n  setGame(loaded, emptyCell, movesLoaded);\r\n};\r\n\r\nlet showCount = 0;\r\n\r\nconst changeMoveElement = (count) => {\r\n  showCount = count;\r\n  movesCountElement.innerHTML = `Moves ${count}`;\r\n};\r\n\r\nconst setGame = (loadedGame = [], empty = null, movesLoaded = null) => {\r\n  const shuffledArray =\r\n    loadedGame.length !== 0\r\n      ? Array(arrayLength)\r\n          .fill(0)\r\n          .map((_, key) => key)\r\n      : shuffleArray(arrayLength);\r\n\r\n  console.table(shuffledArray);\r\n  puzzleListElement.setAttribute('style', setGridStyle(Math.sqrt(arrayLength)));\r\n  const puzzleListArr = createPuzzleItemCell(arrayLength);\r\n\r\n  puzzleListArr[0] = createPuzzleCell(\r\n    [...createPuzzleItemList(shuffledArray)],\r\n    0\r\n  );\r\n\r\n  puzzleListElement.innerHTML = [...puzzleListArr]\r\n    .toString()\r\n    .replaceAll(',', '');\r\n\r\n  const puzzleListItem = document.querySelectorAll('.puzzle__item');\r\n  const puzzleListCell = document.querySelectorAll('.puzzle__cell');\r\n\r\n  const findLast = (list) => {\r\n    const element = list.find((a) => a.id === arrayLength - 1);\r\n    return list.indexOf(element);\r\n  };\r\n\r\n  console.log('GAME SET');\r\n  const puzzleItemObjArr = [...puzzleListItem].map((item, key) => {\r\n    const isLoaded = loadedGame.length !== 0;\r\n    const parentId = isLoaded ? loadedGame[key] : key;\r\n    return { item, parentId: parentId, id: Number(item.dataset.order) };\r\n  });\r\n\r\n  const puzzleCellObjArr = [...puzzleListCell].map((item, key) => {\r\n    const nested = puzzleItemObjArr[key] ? puzzleItemObjArr[key].id : null;\r\n    return { item, nestedId: puzzleItemObjArr[key].id, id: key };\r\n  });\r\n\r\n  const lastElementIndex =\r\n    loadedGame.length !== 0 ? empty : findLast(puzzleItemObjArr);\r\n\r\n  animateDrag = new AnimateDrag(\r\n    puzzleListElement,\r\n    [...puzzleCellObjArr],\r\n    puzzleItemObjArr\r\n  );\r\n\r\n  animateDrag.movesCountElement = changeMoveElement;\r\n  movesLoaded ? animateDrag.resetCount(movesLoaded) : animateDrag.resetCount();\r\n  puzzleCellObjArr.at(lastElementIndex).nestedId = null;\r\n  puzzleItemObjArr[findLast(puzzleItemObjArr)].item.classList.add('hide');\r\n\r\n  animateDrag.emptyCell = empty\r\n    ? puzzleCellObjArr.at(empty)\r\n    : puzzleCellObjArr.at(lastElementIndex);\r\n\r\n  console.log('SET EMPTY', animateDrag.emptyCell);\r\n  animateDrag.setDefaultPosition(loadedGame);\r\n  animateDrag.puzzleRowLength = Math.sqrt(arrayLength);\r\n  animateDrag.puzzleLength = arrayLength;\r\n  animateDrag.callVictory = callVictory;\r\n  animateDrag.saveGameList();\r\n  puzzleListItem.forEach((item, key) => {\r\n    item.addEventListener('mousedown', (e) => {\r\n      clickHandler(e, item);\r\n    });\r\n    item.addEventListener('touchstart', (e) => {\r\n      clickHandler(e, item);\r\n      console.log('TOUCH FIRED');\r\n    });\r\n  });\r\n\r\n  function clickHandler(e, item) {\r\n    if (!timer.getIntervalState()) {\r\n      timer.fireCount();\r\n      console.log('FIIRED');\r\n    }\r\n    playAudio();\r\n    animateDrag.startDragElementList(e, item);\r\n    // movesCountElement.innerHTML = animateDrag.movesCount;\r\n    if (checkVictory(puzzleItemObjArr)) {\r\n      animateDrag.resetCount();\r\n      showModal();\r\n    }\r\n  }\r\n\r\n  // infoButton.addEventListener('click', () => {\r\n  //   console.log('BACK');\r\n  //   animateDrag.moveSolution();\r\n  // });\r\n\r\n  window.addEventListener('resize', function (event) {\r\n    if (puzzleListElement.clientWidth < 1100) {\r\n      animateDrag.setResizePosition();\r\n      console.log('LESS');\r\n    } else console.log('more');\r\n  });\r\n};\r\n// console.log(browser);\r\nfunction victoryPopup() {\r\n  return createPopup(timer.getEndTime(), showCount);\r\n}\r\n\r\nfunction showModal(victory = false) {\r\n  if (victory) {\r\n    timer.stopCount();\r\n    modal.classList.toggle('activeModal');\r\n    modal.innerHTML = createPopup(timer.getEndTime(), showCount);\r\n    saveLeaderBoard({\r\n      time: timer.getEndTime(),\r\n      count: showCount,\r\n      total: timer.getTotal(),\r\n    });\r\n  } else {\r\n    modal.classList.toggle('activeModal');\r\n    modal.innerHTML = createLeaderBoard(loadLeaderBoard());\r\n  }\r\n}\r\n\r\nfunction callVictory(flag) {\r\n  if (flag) showModal(true);\r\n}\r\n\r\nsetGame();\r\n","export function getBody() {\r\n  return `\r\n  <div class=\"modal\"></div>\r\n  <div class=\"savedModal\">Game Saved</div>\r\n  <div class=\"controlBar\">\r\n    <button class=\"btn controlShuffle\">Shuffle</button>\r\n    \r\n    <select class=\"controlSelect\" name=\"frameSize\">\r\n      <option selected value=\"3\">3</option>\r\n      <option value=\"4\">4</option>\r\n      <option value=\"5\">5</option>\r\n      <option value=\"6\">6</option>\r\n      <option value=\"7\">7</option>\r\n      <option value=\"8\">8</option></select\r\n    ><label class=\"player\" for=\"sound\"\r\n      >Sound<input id=\"soundCheck\" type=\"checkbox\" checked /></label\r\n    ><button class=\"btn controlSave\">Save</button\r\n    ><button class=\"btn controlLoad\">Load</button\r\n    ><button class=\"btn controlInfo\">Info</button>\r\n  </div>\r\n  <audio id=\"myAudio\">\r\n    <source src=\"./swing-whoosh-110410.mp3\" type=\"audio/ogg\" />\r\n  </audio>\r\n  <div class=\"board\">\r\n    <div class=\"movesCount\">Moves 0</div>\r\n    <div class=\"timer\">\r\n      <span class=\"seconds\">00:00</span>\r\n      </div>\r\n      <button class=\"btn controlReset\">Start/Stop</button>\r\n  </div>\r\n  <div class=\"container\"><div class=\"puzzle__list\"></div></div>\r\n  `;\r\n}\r\n"],"names":["document","querySelector","AnimateDrag","isDraggable","puzzleRowLength","puzzleLength","movesCount","movesCountElement","grabAnimationClass","transitionListClass","elementInitialState","x","y","startPosition","offsetTop","initialId","dragElement","dragArea","dragDropZone","dragElementList","startCell","Axis","startParent","shiftMouseParent","cellFrame","saveList","resetCount","init","this","console","log","getDivideRest","num","getAvailableCells","key","arr","push","constructor","setTransitionClass","listClass","grabClass","saveGameList","sortedList","sort","a","b","id","checkSequence","table","some","isSolved","filter","length","parentId","setInitInitialState","offsetLeft","setStartPosition","mouseDown","entry","getDifference","clientX","clientY","style","top","replace","getAxis","findDragElement","setDraggableBorders","getDistanceRectCoord","getParentCell","item","getAvailableCoord","index","setElementPosition","element","left","toggleElementClass","reverse","add","remove","classList","pos","checkElementCrossing","filtered","zone","drop","checkIsCrossing","height","bottom","width","right","setSingleTransition","className","addEventListener","checkIsContainsTransition","contains","find","param","getDistanceRect","cell","prop","getBoundingClientRect","Number","setEmptyCell","e","emptyCell","currentCell","checkAvailablePoints","coord","frame","axis","moveDragElement","Event","mouseEvent","touches","currentPoint","position","positionSubShift","watchCrossingList","drag","collision","nestedId","setDefaultPosition","loadList","isLoaded","forEach","setResizePosition","boundaries","dropListener","preventDefault","dropDragElement","removeMouseUpListener","removeEventListener","moveHandler","mouseMove","includes","startDragElementList","target","possibleMoves","once","callVictory","triggerMouseEvent","node","eventType","clickEvent","createEvent","initEvent","dispatchEvent","moveSolution","moveTo","movesPathList","pop","parent","topShift","addMovesPathList","getAvailableMoves","row","Math","sqrt","direction","map","moves","innerHTML","seconds","showTimeCallback","str","timer","interval","callback","total","getIntervalState","clearCount","clearInterval","time","getEndTime","newTimer","setInterval","count","bind","fireCount","startCount","stopCount","getTimerValue","minutes","show","parseInt","getTotal","setTotal","current","createPuzzleCell","order","selectSize","shuffleButton","resetButton","saveButton","loadButton","infoButton","soundCheck","moveSound","getElementById","modal","puzzleListElement","savedModal","animateDrag","solutionShuffle","playbackRate","saveGame","loadGame","arrayLength","fisherShuffle","i","randIndex","floor","random","event","value","setGame","showModal","isSolvableLess","kDisorder","len","j","blank","indexOf","itemList","localStorage","setItem","JSON","stringify","showSmallModal","message","loaded","parse","getItem","movesLoaded","showCount","changeMoveElement","loadedGame","empty","shuffledArray","Array","fill","_","array","shuffled","shuffleArray","setAttribute","setGridStyle","puzzleListArr","createPuzzleItemCell","createPuzzleItem","toString","replaceAll","puzzleListItem","querySelectorAll","puzzleListCell","findLast","list","puzzleItemObjArr","dataset","puzzleCellObjArr","lastElementIndex","clickHandler","checked","play","isArray","every","at","window","clientWidth","victory","toggle","score","slice","saveLeaderBoard","loadLeaderBoard","join","flag"],"sourceRoot":""}